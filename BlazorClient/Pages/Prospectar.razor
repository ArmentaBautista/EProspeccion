@page "/Prospectar"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime Js

<PageTitle>Prospección de Personas</PageTitle>
<h3>Gestiones</h3>
@if (!OcultarNuevo)
{
	<NavLink class="btn btn-primary mb-5" href="Gestiones/new"><i class="bi bi-window-plus me-1"></i>Nueva Gestión</NavLink>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-4">
            <label for="filtro" class="form-label">Filtro por nombre:</label>
        </div>
        <div class="col-5">
            <input type="search" id="filtro" class="form-control" @bind-value="Filtro" />

        </div>
        <div class="col-1">
	        <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="bi bi-search"></i></button>
	        <button type="button" class="btn btn-primary" @onclick="(()=>Exportar())"><i class="bi bi-file-excel"></i></button>
        </div>
    </div>
    <div class="row mt-3">
        <table class="table table-bordered table-light">
            <thead>
                <tr class="table-dark">
                    <td>Id</td>
                    <td>Persona</td>
                    <td>Actividad</td>
                    <td>Resultado</td>
                    <td>Fecha</td>
                    <td>Hora</td>
                    <td>Acciones</td>
                </tr>
            </thead>
            <tbody>
                @if (Lista is null)
                {
                <td colspan="5"><p class="alert alert-info">Cargando...</p></td>
                }
                else if (!Lista.Any())
                {
                <td colspan="5"><p class="alert alert-danger">No se encontraron datos</p></td>
                }
                else
                {
                    @foreach (var item in Lista)
                    {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Nombre</td>
                        <td>@item.Actividad</td>
                        <td>@item.Resultado</td>
                        <td>@item.Fecha.ToShortDateString()</td>
                        <td>@item.Hora.ToShortTimeString()</td>
                        <td>
                           <button class="btn btn-danger" hidden="@OcultarBorrado" @onclick="() => Eliminar(item.Id)"><i class="bi bi-trash"></i></button>
                        </td>
                    </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<LoadingComponent IsLoading="Cargando" />

@code {
	private bool OcultarNuevo = false;
	private bool OcultarBorrado = false;

    public ICollection<GestionDtoResponse>? Lista { get; set; }
    public string? Filtro { get; set; }
    public bool Cargando { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Buscar();
        try
        {
	        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
	        OcultarNuevo = !authState.User.IsInRole("Usuario");
            OcultarBorrado = authState.User.IsInRole("Usuario");
			
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task Buscar()
    {
        try
        {
            Cargando = true;
            Lista = await HttpClient.GetFromJsonAsync<ICollection<GestionDtoResponse>>($"api/Gestiones?filtro={Filtro}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            Cargando = false;
        }
    }

    [Obsolete]
    private void Editar(int id)
    {
        ToastService.ShowError($"Ups! No se permite la edición de Gestiones, en su lugar registre una nueva");
        NavigationManager.NavigateTo($"/Gestiones");

        NavigationManager.NavigateTo($"/Gestiones/edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = "Esta acción borrará el registro",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, bórralo!",
                CancelButtonText = "Por ahora no"
            });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Gestiones/{id}");
            await Buscar();
        }
    }

    private async Task Exportar()
    {
        var response = await HttpClient.GetAsync("api/Excel/Exportar");
	    var fileStream = response.Content.ReadAsStream();
	    using var streamRef = new DotNetStreamReference(stream: fileStream);
	    await Js.InvokeVoidAsync("downloadFileFromStream", "GestoresGestiones.xlsx", streamRef);
 
    }


}

